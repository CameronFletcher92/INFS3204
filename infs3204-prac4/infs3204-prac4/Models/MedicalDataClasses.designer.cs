#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace infs3204_prac4.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MedicalDB")]
	public partial class MedicalDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPatientData(PatientData instance);
    partial void UpdatePatientData(PatientData instance);
    partial void DeletePatientData(PatientData instance);
    partial void InsertDoctorData(DoctorData instance);
    partial void UpdateDoctorData(DoctorData instance);
    partial void DeleteDoctorData(DoctorData instance);
    partial void InsertAppointmentData(AppointmentData instance);
    partial void UpdateAppointmentData(AppointmentData instance);
    partial void DeleteAppointmentData(AppointmentData instance);
    #endregion
		
		public MedicalDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MedicalDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PatientData> PatientDatas
		{
			get
			{
				return this.GetTable<PatientData>();
			}
		}
		
		public System.Data.Linq.Table<DoctorData> DoctorDatas
		{
			get
			{
				return this.GetTable<DoctorData>();
			}
		}
		
		public System.Data.Linq.Table<AppointmentData> AppointmentDatas
		{
			get
			{
				return this.GetTable<AppointmentData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class PatientData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HealthInsuranceNo;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _PhoneNumber;
		
		private string _Address;
		
		private string _Email;
		
		private EntitySet<AppointmentData> _AppointmentDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealthInsuranceNoChanging(string value);
    partial void OnHealthInsuranceNoChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public PatientData()
		{
			this._AppointmentDatas = new EntitySet<AppointmentData>(new Action<AppointmentData>(this.attach_AppointmentDatas), new Action<AppointmentData>(this.detach_AppointmentDatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInsuranceNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthInsuranceNo
		{
			get
			{
				return this._HealthInsuranceNo;
			}
			set
			{
				if ((this._HealthInsuranceNo != value))
				{
					this.OnHealthInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._HealthInsuranceNo = value;
					this.SendPropertyChanged("HealthInsuranceNo");
					this.OnHealthInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_AppointmentDatas", ThisKey="HealthInsuranceNo", OtherKey="HealthInsuranceNo")]
		public EntitySet<AppointmentData> AppointmentDatas
		{
			get
			{
				return this._AppointmentDatas;
			}
			set
			{
				this._AppointmentDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentDatas(AppointmentData entity)
		{
			this.SendPropertyChanging();
			entity.PatientData = this;
		}
		
		private void detach_AppointmentDatas(AppointmentData entity)
		{
			this.SendPropertyChanging();
			entity.PatientData = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class DoctorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MedicalRegistrationNo;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _HealthProfession;
		
		private int _PhoneNumber;
		
		private string _Email;
		
		private EntitySet<AppointmentData> _AppointmentDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicalRegistrationNoChanging(string value);
    partial void OnMedicalRegistrationNoChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnHealthProfessionChanging(string value);
    partial void OnHealthProfessionChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public DoctorData()
		{
			this._AppointmentDatas = new EntitySet<AppointmentData>(new Action<AppointmentData>(this.attach_AppointmentDatas), new Action<AppointmentData>(this.detach_AppointmentDatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalRegistrationNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MedicalRegistrationNo
		{
			get
			{
				return this._MedicalRegistrationNo;
			}
			set
			{
				if ((this._MedicalRegistrationNo != value))
				{
					this.OnMedicalRegistrationNoChanging(value);
					this.SendPropertyChanging();
					this._MedicalRegistrationNo = value;
					this.SendPropertyChanged("MedicalRegistrationNo");
					this.OnMedicalRegistrationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthProfession", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string HealthProfession
		{
			get
			{
				return this._HealthProfession;
			}
			set
			{
				if ((this._HealthProfession != value))
				{
					this.OnHealthProfessionChanging(value);
					this.SendPropertyChanging();
					this._HealthProfession = value;
					this.SendPropertyChanged("HealthProfession");
					this.OnHealthProfessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_AppointmentDatas", ThisKey="MedicalRegistrationNo", OtherKey="MedicalRegistrationNo")]
		public EntitySet<AppointmentData> AppointmentDatas
		{
			get
			{
				return this._AppointmentDatas;
			}
			set
			{
				this._AppointmentDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentDatas(AppointmentData entity)
		{
			this.SendPropertyChanging();
			entity.DoctorData = this;
		}
		
		private void detach_AppointmentDatas(AppointmentData entity)
		{
			this.SendPropertyChanging();
			entity.DoctorData = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointments")]
	public partial class AppointmentData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HealthInsuranceNo;
		
		private string _MedicalRegistrationNo;
		
		private System.DateTime _AppointmentTime;
		
		private string _ClinicName;
		
		private EntityRef<DoctorData> _DoctorData;
		
		private EntityRef<PatientData> _PatientData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealthInsuranceNoChanging(string value);
    partial void OnHealthInsuranceNoChanged();
    partial void OnMedicalRegistrationNoChanging(string value);
    partial void OnMedicalRegistrationNoChanged();
    partial void OnAppointmentTimeChanging(System.DateTime value);
    partial void OnAppointmentTimeChanged();
    partial void OnClinicNameChanging(string value);
    partial void OnClinicNameChanged();
    #endregion
		
		public AppointmentData()
		{
			this._DoctorData = default(EntityRef<DoctorData>);
			this._PatientData = default(EntityRef<PatientData>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInsuranceNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthInsuranceNo
		{
			get
			{
				return this._HealthInsuranceNo;
			}
			set
			{
				if ((this._HealthInsuranceNo != value))
				{
					if (this._PatientData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHealthInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._HealthInsuranceNo = value;
					this.SendPropertyChanged("HealthInsuranceNo");
					this.OnHealthInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalRegistrationNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MedicalRegistrationNo
		{
			get
			{
				return this._MedicalRegistrationNo;
			}
			set
			{
				if ((this._MedicalRegistrationNo != value))
				{
					if (this._DoctorData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalRegistrationNoChanging(value);
					this.SendPropertyChanging();
					this._MedicalRegistrationNo = value;
					this.SendPropertyChanged("MedicalRegistrationNo");
					this.OnMedicalRegistrationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentTime", DbType="DateTime NOT NULL")]
		public System.DateTime AppointmentTime
		{
			get
			{
				return this._AppointmentTime;
			}
			set
			{
				if ((this._AppointmentTime != value))
				{
					this.OnAppointmentTimeChanging(value);
					this.SendPropertyChanging();
					this._AppointmentTime = value;
					this.SendPropertyChanged("AppointmentTime");
					this.OnAppointmentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClinicName
		{
			get
			{
				return this._ClinicName;
			}
			set
			{
				if ((this._ClinicName != value))
				{
					this.OnClinicNameChanging(value);
					this.SendPropertyChanging();
					this._ClinicName = value;
					this.SendPropertyChanged("ClinicName");
					this.OnClinicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_DoctorData", ThisKey="MedicalRegistrationNo", OtherKey="MedicalRegistrationNo", IsForeignKey=true)]
		public DoctorData DoctorData
		{
			get
			{
				return this._DoctorData.Entity;
			}
			set
			{
				DoctorData previousValue = this._DoctorData.Entity;
				if (((previousValue != value) 
							|| (this._DoctorData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DoctorData.Entity = null;
						previousValue.AppointmentDatas.Remove(this);
					}
					this._DoctorData.Entity = value;
					if ((value != null))
					{
						value.AppointmentDatas.Add(this);
						this._MedicalRegistrationNo = value.MedicalRegistrationNo;
					}
					else
					{
						this._MedicalRegistrationNo = default(string);
					}
					this.SendPropertyChanged("DoctorData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_PatientData", ThisKey="HealthInsuranceNo", OtherKey="HealthInsuranceNo", IsForeignKey=true)]
		public PatientData PatientData
		{
			get
			{
				return this._PatientData.Entity;
			}
			set
			{
				PatientData previousValue = this._PatientData.Entity;
				if (((previousValue != value) 
							|| (this._PatientData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientData.Entity = null;
						previousValue.AppointmentDatas.Remove(this);
					}
					this._PatientData.Entity = value;
					if ((value != null))
					{
						value.AppointmentDatas.Add(this);
						this._HealthInsuranceNo = value.HealthInsuranceNo;
					}
					else
					{
						this._HealthInsuranceNo = default(string);
					}
					this.SendPropertyChanged("PatientData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
